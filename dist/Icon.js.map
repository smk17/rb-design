{"version":3,"sources":["Icon.js"],"names":["React","_interopRequireWildcard","require","_classnames","_interopRequireDefault","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","svgBaseProps","_defineProperty","_svgBaseProps","width","height","fill","customCache","Set","props","_classNames","innerNode","className","type","Component","component","viewBox","spin","children","restProps","default","concat","Boolean","svgClassString","innerSvgProps","assign","createElement","classString","options","arguments","undefined","scriptUrl","_options$extraCommonP","extraCommonProps","document","script","setAttribute","add","body","appendChild","content","Iconfont","displayName","createFromIconfontCN"],"mappings":"gHAUA,kBAAAA,MAAAC,wBAAAC,QAAA,UAAAC,YAAAC,uBAAAF,QAAA,4hBAVA,IAAIG,OAAkC,SAAUC,EAAGC,GAC/C,IAAIC,EAAI,GACR,IAAK,IAAIC,KAAKH,EAAOI,OAAOC,UAAUC,eAAeC,KAAKP,EAAGG,IAAMF,EAAEO,QAAQL,GAAK,IAC9ED,EAAEC,GAAKH,EAAEG,IACb,GAAS,MAALH,GAAqD,mBAAjCI,OAAOK,sBACtB,CAAA,IAAIC,EAAI,EAAb,IAAgBP,EAAIC,OAAOK,sBAAsBT,GAAIU,EAAIP,EAAEQ,OAAQD,IAAST,EAAEO,QAAQL,EAAEO,IAAM,IAC1FR,EAAEC,EAAEO,IAAMV,EAAEG,EAAEO,KAG1B,OAAAR,GAEaU,cAAYC,gBAAAC,cAAA,CACrBC,MAAO,MACPC,OAAQ,MACRC,KAAM,gBACL,cAAgB,QAJIJ,gBAAAC,cAAA,YAKV,SALUA,iDAOzB,IAAMI,YAAc,IAAIC,IAlBpBpB,KAAU,SAAAqB,GAAA,IAAAC,EAaJC,EAXNC,EAEIH,EAFJG,UAAAC,EAEIJ,EAFJI,KAAAC,EAEIL,EAFJM,UAAAC,EAEIP,EAFJO,QAAAC,EAEIR,EAFJQ,KAEAC,EAAIT,EAAJS,SAAiBC,EAAcrB,OAAAA,EAAAA,CAAAA,YAA0B,OACrD,YAAK,UAAeL,OAAOK,aAAmDD,GAAF,EAAAX,YAAAkC,UAAAlB,gBAAAQ,EAAA,GAAA,WAA5E,GAA4ER,gBAAAQ,EAAA,WAAAW,OAEhFR,GAAAS,QAAAT,IAFgFH,GALpFE,GA+BUW,GAAiB,EAAArC,YAAAkC,SAAAlB,gBAAA,GAAA,iBApBFe,GAAA,YAAAJ,IAAA,GAAAC,EAAA,CA0BjB,IAAMU,EAAgB/B,OAAOgC,OAAO,GAAIxB,aAAc,CAAEW,UAAWW,EAAgBP,QAAAA,IAnBrFT,UAqBaiB,EAAcR,QApBXL,EAAA5B,MAAA2C,cAAAZ,EAAArB,OAAAgC,OAAA,GAAAD,GAAAN,GAAA,GAGlBN,EAIaH,CAFbI,IAEaJ,EAPKhB,OAAAgC,OAAA,GAAAxB,aAAA,CAAAW,UAAAW,IAKDT,EAEJL,MAFPM,cALY,MAAAtB,OAAAgC,OAAA,GAAAD,EAAA,CAAAR,QAAAA,IAAAE,GAAA,OAAAnC,MAAA2C,cAAA,IAAAjC,OAAAgC,OAAA,GAAAN,EAAA,CAAAP,UAAAe,IAAAhB,IAAA,SAOEQ,uBAA0B,IAARS,EAAQ,EAAAC,UAAA7B,aAAA8B,IAAAD,UAAA,GAAAA,UAAA,GAAC,GAwBvCE,EAAqCH,EAArCG,UAxBsCC,EAwBDJ,EAA1BK,iBAAAA,OAxB2B,IAAAD,EAwBR,GAxBQA,EAWcpB,GAAWW,oBAAFW,UAAkBlB,oBAAAA,QAAnF,mBAAAkB,SAAAR,eAuBqB,iBAAdK,GAtBHA,EAAU/B,SACVO,YAAOiB,IAAAA,GAAP,CACH,IAAAW,EAAAD,SAAAR,cAAA,UAwBDS,EAAOC,aAAa,MAAOL,GAvB3BpB,EAASyB,aAASV,iBAANK,GACfxB,YAAA8B,IAAAN,GAyBGG,SAASI,KAAKC,YAAYJ,GAvB1B,IAAMX,EAAAA,SAAAA,GAAgB/B,IAA2CoB,EAAEU,EAAFV,KAAEU,EAAAA,EAAAA,SAAAA,EAAAA,OAAAA,EAAAA,CAAAA,OAAAA,aA4B/DiB,EAAU,KAzB8C5B,OAF5DD,EAAa5B,OAA8DiC,EAASA,MAAAA,cAAAA,MAAAA,CAAAA,UAAAA,IAAAA,OAAAA,MACvFE,IA+BOsB,EAAUtB,GA9ByDS,MAAAA,cAAAA,KAAAA,OAAAA,OAAAA,GAAAA,EAAAA,GAAAA,IAmC3E,OA/DJc,EAAAC,YAAA,WA+DWD,eAjCiCE","file":"Icon.js","sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport * as React from \"react\";\nimport classNames from \"classnames\";\nexport const svgBaseProps = {\n    width: \"1em\",\n    height: \"1em\",\n    fill: \"currentColor\",\n    [\"aria-hidden\"]: \"true\",\n    focusable: \"false\"\n};\nconst customCache = new Set();\nconst Icon = props => {\n    const { \n    // affect outter <i>...</i>\n    className, \n    // affect inner <svg>...</svg>\n    type, component: Component, viewBox, spin, \n    // children\n    children } = props, restProps = __rest(props, [\"className\", \"type\", \"component\", \"viewBox\", \"spin\", \"children\"]);\n    const classString = classNames({\n        [`anticon`]: true,\n        [`anticon-${type}`]: Boolean(type)\n    }, className);\n    const svgClassString = classNames({\n        [`anticon-spin`]: !!spin || type === \"loading\"\n    });\n    let innerNode;\n    // component > children > type\n    if (Component) {\n        const innerSvgProps = Object.assign({}, svgBaseProps, { className: svgClassString, viewBox });\n        if (!viewBox) {\n            delete innerSvgProps.viewBox;\n        }\n        innerNode = React.createElement(Component, Object.assign({}, innerSvgProps), children);\n    }\n    if (children) {\n        const innerSvgProps = Object.assign({}, svgBaseProps, { className: svgClassString });\n        innerNode = (React.createElement(\"svg\", Object.assign({}, innerSvgProps, { viewBox: viewBox }), children));\n    }\n    return (React.createElement(\"i\", Object.assign({}, restProps, { className: classString }), innerNode));\n};\nfunction createFromIconfontCN(options = {}) {\n    const { scriptUrl, extraCommonProps = {} } = options;\n    /**\n     * DOM API required.\n     * Make sure in browser environment.\n     * The Custom Icon will create a <script/>\n     * that loads SVG symbols and insert the SVG Element into the document body.\n     */\n    if (typeof document !== \"undefined\" &&\n        typeof window !== \"undefined\" &&\n        typeof document.createElement === \"function\" &&\n        typeof scriptUrl === \"string\" &&\n        scriptUrl.length &&\n        !customCache.has(scriptUrl)) {\n        const script = document.createElement(\"script\");\n        script.setAttribute(\"src\", scriptUrl);\n        script.setAttribute(\"data-namespace\", scriptUrl);\n        customCache.add(scriptUrl);\n        document.body.appendChild(script);\n    }\n    const Iconfont = props => {\n        const { type, children } = props, restProps = __rest(props, [\"type\", \"children\"]);\n        // component > children > type\n        let content = null;\n        if (props.type) {\n            content = React.createElement(\"use\", { xlinkHref: `#${type}` });\n        }\n        if (children) {\n            content = children;\n        }\n        return (React.createElement(Icon, Object.assign({}, restProps, extraCommonProps), content));\n    };\n    Iconfont.displayName = \"Iconfont\";\n    return Iconfont;\n}\nexport default createFromIconfontCN;\n"]}