{"version":3,"sources":["RbImage/index.js"],"names":["React","_interopRequireWildcard","require","_classnames","_interopRequireDefault","RbImage","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","Icon","createElement","Fragment","Component","_this$props","props","width","height","src","background","children","objectFit","className","onClick","alt","style","Object","assign","default","backgroundImage","concat","undefined","classes","rb-image-cover","rb-image-contain","renderImg","defaultProps"],"mappings":"2FAAA,IAAAA,MAAAC,wBAAAC,QAAA,UACAC,YAAAC,uBAAAF,QAAA,uyDACAA,QAAA,mBACMG,oBACF,SAAAA,IAAc,IAAAC,EAAA,OAAAC,gBAAAC,KAAAH,IACVC,EAAAG,2BAAAD,KAAAE,gBAAAL,GAAAM,MAAAH,KAASI,aACJC,KAAOb,MAAMc,cAAcd,MAAMe,SAAU,MAFtCT,qBADIN,MAAMgB,6DAKZ,IAAAC,EAPhBT,KAAAU,MAAAC,EAOgBF,EAPhBE,MAAAC,EAOgBH,EAPhBG,OAAAC,EAOgBJ,EAPhBI,IAAAC,EAOgBL,EAPhBK,WAAAC,EAOgBN,EAPhBM,SAAAC,EAOgBP,EAPhBO,UAAAC,EAOgBR,EAPhBQ,UAAAC,EAOgBT,EAPhBS,QAAAC,EAOgBV,EAPhBU,IAScC,EAAQC,OAAOC,OAAO,GAAItB,KAAKU,MAAMU,OAK3C,GAbRT,IAUYS,EAAMT,MAAQA,GACdC,IACAQ,EAAMT,MAAQC,GACdE,EACA,OAAQtB,MAAMc,cAAc,MAAO,CAAEW,WAAW,EAAAtB,YAAA4B,SAAW,CAAC,qBAAsBN,IAAaC,QAASA,EAASE,MAAOC,OAAOC,OAAO,GAAIF,EAAO,CAAEI,gBAAiBX,EAAG,OAAAY,OAAUZ,EAAV,UAAmBa,KAAgBX,GAG1M,IAAMY,EAAU,CACZC,iBAAgC,UAAdZ,EAClBa,mBAAkC,YAAdb,GAIxB,OAFIC,IACAU,EAAQV,IAAa,GACjBzB,MAAMc,cAAc,MAAO,CAAEW,WAAW,EAAAtB,YAAA4B,SAAWI,GAAUd,IAAKA,EAAKM,IAAKA,EAAKC,MAAOA,EAAOF,QAASA,qCAKpH,OADgBlB,KAAKU,MAAbG,IAEGb,KAAK8B,YAGL9B,KAAKK,cAIxBR,QAAQkC,aAAe,CACnBlB,IAAK,GAnCLG,UAAA,sBAsCWnB","file":"index.js","sourcesContent":["import * as React from \"react\";\nimport classNames from \"classnames\";\nimport \"./index.css\";\nclass RbImage extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.Icon = React.createElement(React.Fragment, null);\n    }\n    renderImg() {\n        const { width, height, src, background, children, objectFit, className, onClick, alt } = this.props;\n        const style = Object.assign({}, this.props.style);\n        if (width)\n            style.width = width;\n        if (height)\n            style.width = height;\n        if (background) {\n            return (React.createElement(\"div\", { className: classNames([\"rb-image-container\", className]), onClick: onClick, style: Object.assign({}, style, { backgroundImage: src ? `url(${src})` : undefined }) }, children));\n        }\n        else {\n            const classes = {\n                \"rb-image-cover\": objectFit === \"cover\",\n                \"rb-image-contain\": objectFit === \"contain\"\n            };\n            if (className)\n                classes[className] = true;\n            return (React.createElement(\"img\", { className: classNames(classes), src: src, alt: alt, style: style, onClick: onClick }));\n        }\n    }\n    render() {\n        const { src } = this.props;\n        if (src) {\n            return this.renderImg();\n        }\n        else {\n            return this.Icon;\n        }\n    }\n}\nRbImage.defaultProps = {\n    src: \"\",\n    objectFit: \"cover\"\n};\nexport default RbImage;\n"]}